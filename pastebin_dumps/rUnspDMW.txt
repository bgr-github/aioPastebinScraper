// Pardon my pseudo-C++.

class State
{
public:
	virtual void Move( GameObject* thisObject ) = 0;
	virtual void Animate( GameObject* thisObject ) = 0;
	virtual void DoPhysics( GameObject* thisObject ) = 0;
	virtual void DoSomeGameplayRelatedThing( GameObject* thisObject ) = 0;
};

class NormalState : public State
{
public:
	void Move( GameObject* thisObject )
	{
		thisObject->position.x += controller.leftStickMovement.x;
	}

	void Animate( GameObject* thisObject )
	{
		Renderer.Draw( thisObject->normalSprite );
	}

	void DoPhysics( GameObject* thisObject )
	{
		thisObject->velocity.y += gravity;
		thisObject->IntegrateVelocityAndHandleCollisions();
	}
	
	void DoSomeGameplayRelatedThing( GameObject* thisObject )
	{
		thisObject->points += 9001;
	}
};

class JumpingState : public State
{
public:
	void Move( GameObject* thisObject )
	{
		// The player doesn't have anything to walk on, so they need to rely on initial velocity.
	}

	void Animate( GameObject* thisObject )
	{
		Renderer.Draw( thisObject->jumpingSprite );
	}

	void DoPhysics( GameObject* thisObject )
	{
		// Let's say the player can turn off gravity while jumping somehow
		if( !controller.buttons.A )
			thisObject->velocity.y += gravity;

		thisObject->IntegrateVelocityAndHandleCollisions();
	}
	
	void DoSomeGameplayRelatedThing( GameObject* thisObject )
	{
		// Don't get points while jumping for whatever reason
		thisObject->points += 0;
	}
};

// And so on.

// Now GameObjects can potentially have a 'state' pointer in them, and you can do things like the following--

class GameObject
{
public:
	GameObject() : state( GetDefaultStatePointerSomehow() )
	{
	}

	void SetState( State* newState )
	{
		state = newState;
	}

	void Move()
	{
		state->Move( this );
	}

	void Animate()
	{
		state->Animate( this );
	}

	void DoPhysics()
	{
		state->DoPhysics( this );
	}
	
	void DoSomeGameplayRelatedThing()
	{
		state->DoSomeGameplayRelatedThing( this );
	}

private:
	State* currentState;
};